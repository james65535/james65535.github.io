<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>James65535 Blog</title>
  <generator uri="https://github.com/jekyll/jekyll">Jekyll v3.1.1</generator>
    <icon>http://James65535.github.io/apple-touch-icon-precomposed.png</icon>
  <subtitle>A Data Point for Technical Musings</subtitle>
  <link href="http://James65535.github.io/atom.xml" rel="self"/>
  <link href="http://James65535.github.io/" rel="alternate" type="text/html"/>
  <updated>2016-03-24T13:07:53+08:00</updated>
  <id>http://James65535.github.io/</id>
  <author>
    <name>James65535</name>
    <uri>http://James65535.github.io/</uri>
    
  </author>

  
  <entry>
    <title>Navigating the Front End Wilderness Part 2</title>
    <link href="http://James65535.github.io/development/Navigating-Front-End-Wilderness-pt2/"/>
    <updated>2016-03-11T00:00:00+08:00</updated>
    <id>http://James65535.github.io/development/Navigating-Front-End-Wilderness-pt2</id>
    <author>
      <name>James65535</name>
      <uri>http://James65535.github.io/</uri>
      
    </author>
    <content type="html">
      
      &lt;p&gt;&lt;em&gt;Its fun being out of your depth so long as you are too stubborn to stop swimming!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Today I ran into major problems trying to setup a React script to query JSON from a site and parse it into something useable.  I’m new to this stuff and used an existing &lt;a href=&quot;https://facebook.github.io/react/tips/initial-ajax.html&quot;&gt;tutorial&lt;/a&gt; to mangle according to my needs.&lt;/p&gt;

&lt;p&gt;I ended up with the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PlanetList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;getInitialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Planets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serverRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;PlayerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PlayerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;PlanetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PlanetName&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Planets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;parray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;renderPlanets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Planets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;Player&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PlayerName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;planet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;planet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PlanetName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serverRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderPlanets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PlanetList&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8000&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;container&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see I am reading in a source from a local webserver which contains JSON for an array of objects, example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;ContainsPlanet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;PlayerName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Computer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;PlayerTokens&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;PlanetName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;g&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;ContainsPlanet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;PlayerName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;PlayerTokens&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;PlanetName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;ContainsPlanet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;PlayerName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;PlayerTokens&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;PlanetName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The problem I experienced is that my array was not being processed and any code I placed inside the JQuery code block was not run.  I tried the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checked webserver output to verify JSON response is being issued correctly&lt;/li&gt;
  &lt;li&gt;Checked webserver logs to verify its receiving requests from the React application&lt;/li&gt;
  &lt;li&gt;Googled my &amp;amp;^%#%@ ass off trying all manner of JQuery/React combinations to try to get the JSON data and parse it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nothing worked.  Finally in my browser when loading the React page I decided to enable Firefox’s Security logging.  I then received the following message:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at http://localhost:8000/. (Reason: CORS header &#39;Access-Control-Allow-Origin&#39; missing).&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bingo!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Since I’m currently working in a local testing phase I simply added the following to my Go function for serving the JSON data and like magic my React application sprang to life!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Access-Control-Allow-Origin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A breath of fresh air!  Now time to move to a deeper depth :)&lt;/p&gt;


    </content>
  </entry>
  
  <entry>
    <title>Navigating the Front End Wilderness</title>
    <link href="http://James65535.github.io/development/Navigating-Front-End-Wilderness/"/>
    <updated>2016-02-28T00:00:00+08:00</updated>
    <id>http://James65535.github.io/development/Navigating-Front-End-Wilderness</id>
    <author>
      <name>James65535</name>
      <uri>http://James65535.github.io/</uri>
      
    </author>
    <content type="html">
      
      &lt;p&gt;Recently I’ve set myself a task of developing a web based game in order to get myself up to speed on modern development patterns and technologies… something I haven’t done since I worked with PHP over a decade ago.&lt;/p&gt;

&lt;p&gt;For my application I wanted to work in a MVC pattern and to carve off the view layer as client side.  For this task I selected &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a challenge for me as the minimal amount of Javascript I know has been used to create Gluecode for automation tasks.  I decided to get a little bit of help by working with online video tutorials but ran into trouble through the combination of my lack of knowledge and the speed of innovation with Javascript libraries and frameworks.  The most problems I had was with &lt;a href=&quot;https://facebook.github.io/react/docs/jsx-in-depth.html&quot;&gt;JSX&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;jsx&quot;&gt;JSX&lt;/h2&gt;
&lt;p&gt;Challenges:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lack of understanding about JSX in general&lt;/li&gt;
  &lt;li&gt;Lack of understanding about transpiling&lt;/li&gt;
  &lt;li&gt;Changes to the React framework since the creation of the video tutorials&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This manifested it’s self when I decided to take the small working app I had create in &lt;a href=&quot;https://plnkr.co/&quot;&gt;Plunker&lt;/a&gt; and bring it into my &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IDE&lt;/a&gt;.  All of a sudden when I browsed to the HTML file locally from Firefox I was getting none of the expected elements to display on the page.  I went into a mad fury researching the above elements pages, creating more tabs in my browser than stars in the sky, and by the end it was a quick solution.&lt;/p&gt;

&lt;p&gt;The crux of the problem was simple.  Somewhere between the time the creation of the video tutorials and now, React had moved away from the JSX Transform tools and adopted &lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt;.  Details on this move can be found &lt;a href=&quot;https://facebook.github.io/react/blog/2015/06/12/deprecating-jstransform-and-react-tools.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Turns out all I had to do was place a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; reference in my HTML to link in Babel, example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I feel like a fish out of water with this Web Front End work!&lt;/p&gt;

    </content>
  </entry>
  
  <entry>
    <title>Containers with Go Integration</title>
    <link href="http://James65535.github.io/infrastructure/containers-go-db/"/>
    <updated>2016-02-03T00:00:00+08:00</updated>
    <id>http://James65535.github.io/infrastructure/containers-go-db</id>
    <author>
      <name>James65535</name>
      <uri>http://James65535.github.io/</uri>
      
    </author>
    <content type="html">
      
      &lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

    </content>
  </entry>
  
  <entry>
    <title>IntelliJ Container Integration with VMware AppCatalyst</title>
    <link href="http://James65535.github.io/infrastructure/IntelliJ-Container-Integration-with-VMware-AppCatalyst/"/>
    <updated>2016-02-03T00:00:00+08:00</updated>
    <id>http://James65535.github.io/infrastructure/IntelliJ-Container-Integration-with-VMware-AppCatalyst</id>
    <author>
      <name>James65535</name>
      <uri>http://James65535.github.io/</uri>
      
    </author>
    <content type="html">
      &lt;img src=&quot;http://James65535.github.io/images/bar.jpg&quot;&gt;&lt;br/&gt;
      &lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The past year has seen tremendous growth and support for Containerization within the Development space.  Containers provide a fast and easy way to fire up a multitude of different development, test, and even production environments.&lt;/p&gt;

&lt;p&gt;Unfortunately Docker does not run natively on OSX, an abstraction layer is needed to create a Container Runtime Host for the Docker service to run on.  Enter VMware AppCatalyst and Project Photon:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Project Photon:&lt;/strong&gt; A lightweight purpose built Linux Container Runtime Host currently released as an Open Source Tech Preview project by VMware&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AppCatalyst:&lt;/strong&gt; A CLI/RESTful API driven lightweight hypervisor for OSX which provides a perfect environment for running Photon instances hosting Docker services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal of this article is to walk the user through the initial configuration steps required to integrate VMware AppCatalyst with IntelliJ IDEA.  This integration will provide the user a seemles method for automating the delivery of containers and deploying their artifacts right on their laptop without having to perform any manual steps outside of the IDE.  Just tell your IDE to build your App and you’re ready to go!&lt;/p&gt;

&lt;h2 id=&quot;target-audience&quot;&gt;Target Audience&lt;/h2&gt;
&lt;p&gt;MAC OSX users who have at least a basic knowledge of Docker and reasonable knowledge of JetBrains IntelliJ IDEA.&lt;/p&gt;

&lt;h2 id=&quot;system-requirements&quot;&gt;System Requirements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;AppCatalyst: OSX 10.9.4 or newer&lt;/li&gt;
  &lt;li&gt;IntelliJ IDEA Ultimate Edition: 14.1 or newer&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Install VMware AppCatalyst:
    &lt;ol&gt;
      &lt;li&gt;Follow the directions from the &lt;a href=&quot;https://communities.vmware.com/docs/DOC-29885&quot;&gt;Getting Started guide&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;You should now be able to fire up a PhotonOS VM with AppCatalyst and SSH into the Photon shell prompt&lt;/li&gt;
      &lt;li&gt;Leave your PhotonOS VM powered on&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;It is recommended to secure your Docker Daemon for listening on a secure TCP Port:
    &lt;ol&gt;
      &lt;li&gt;Follow &lt;a href=&quot;https://docs.docker.com/articles/https/&quot;&gt;the Protect the Docker Daemon Guide&lt;/a&gt; for creating the relevant certificates, you do not need to perform the “Secure by Default” section&lt;/li&gt;
      &lt;li&gt;You should now have all the certificates and keys required to setup secure access to Docker from your host machine&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;prep-work&quot;&gt;Prep-work&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;From your host machine get the IP address of your Photon instance:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; appcatalyst guest getip &amp;lt;replace with vm name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the client certificates from the Photon instance to your preferred folder on your host machine, in this case/home/DockerCerts/:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; scp -i /opt/vmware/appcatalyst/etc/appcatalyst_insecure_ssh_key photon@192.168.135.128:&quot;ca.pem cert.pem ca.pem key.pem&quot; ~/DockerCerts/
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SSH to your Photon instance from your host machine:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ssh -i /opt/vmware/appcatalyst/etc/appcatalyst_insecure_ssh_key photon@192.168.135.128
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Optional: Move your server side certificates to a more appropriate folder:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo cp ~/{ca.pem,server-cert.pem,server-key.pem} /etc/ssl/certs/
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Docker service in Photon is configured through SystemD.  From your Photon SSH connection, modify your service file to change from Unix Socket to a secure TCP connection:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo nano /lib/systemd/system/docker.service
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the following line:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ExecStart=/bin/docker -d -s overlay
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Replace it with the following line:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ExecStart=/bin/docker -d -s overlay --tlsverify --tlscacert=/etc/ssl/certs/ca.pem --tlscert=/etc/ssl/certs/server-cert.pem --tlskey=/etc/ssl/certs/server-key.pem -H=0.0.0.0:2376
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reboot your Photon instance or reload and restart Docker using systemctl:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo shutdown -r now
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Or&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo systemctl daemon-reload
 sudo systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;intellij-idea-configuration&quot;&gt;IntelliJ IDEA Configuration&lt;/h1&gt;
&lt;p&gt;For this example, a simple Java Enterprise Project is used with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Web Application&lt;/code&gt; framework deployed as a Web Application Archive.  Please feel free to create a new project, use an existing one, or follow the steps in the tutorial from JetBrains: https://www.jetbrains.com/idea/help/developing-a-java-ee-application.html&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setup the Docker plug-in:
    &lt;ol&gt;
      &lt;li&gt;Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;IntelliJ IDEA&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Preferences&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Build, Execution, Deployment&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Clouds&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Select the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; symbol and add &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Specificy name as &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Specify the Docker API URL:  &lt;code class=&quot;highlighter-rouge&quot;&gt;https://192.168.135.128:2376&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Specifiy the &lt;code class=&quot;highlighter-rouge&quot;&gt;Certificates Folder&lt;/code&gt; where you copied your client certificates to with SCP and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://james65535.github.io/images/posts/intellijcloudpref.png&quot; alt=&quot;IntelliJ IDEA Cloud Pref&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Configure your project specific settings:
    &lt;ol&gt;
      &lt;li&gt;Create a folder under your project root folder named &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker-out&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;You will need to create a Dockerfile to contain the commands which are issued to Docker during image build.  Within the &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker-out&lt;/code&gt; directory, create a new file called ‘Dockerfile’ and enter the following commands.  The first line specificies the base image and the second specifices the artifact you wish to add to the new image:&lt;/p&gt;

        &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; FROM jboss/wildfly
 ADD JavaEEHelloWorld_war.war /opt/jboss/wildfly/standalone/deployments/
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Your deployment artifacts will need to be placed in the same folder as your &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;.  Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;File&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Project Structure&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Make sure your &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaEEHelloWorld_war.war&lt;/code&gt; artifact is selected and set your output directory to the &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker-out&lt;/code&gt; directory and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://james65535.github.io/images/posts/folderlayout.png&quot; alt=&quot;IntelliJ IDEA Project Folders&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Now the project &lt;code class=&quot;highlighter-rouge&quot;&gt;Run Configuration&lt;/code&gt; needs to be configured for the deployment:
    &lt;ol&gt;
      &lt;li&gt;Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Edit Configurations&lt;/code&gt;, select &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; and add a new &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Deployment&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Specify the name as &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Deployment&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Ensure Deployment specifies &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker-Out/Dockerfile&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Choose a name for the container name, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;My-WebApp&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Next to &lt;code class=&quot;highlighter-rouge&quot;&gt;Container Settings&lt;/code&gt; click the Green Arrow symbol and create a folder within your project folder labeled &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker-Settings&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;In the file-name box ‘container-settings.json’ should already be specified, hit &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Next to ‘Before Launch’ click the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; symbol and select &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Artifacts&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;&lt;img src=&quot;https://james65535.github.io/images/posts/runconfig.png&quot; alt=&quot;IntelliJ IDEA Project Run Config&quot; /&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Choose your artifact and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt; to both windows&lt;/li&gt;
      &lt;li&gt;Finally navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;Run&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Run Docker Deploy&lt;/code&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;IntelliJ IDEA will now build your artifact, communicate to your Photon hosted Docker service, start up a new Container, and deploy your artifact to the container.  If this is the first time you have pulled down the Docker base image then it may take 5-15 minutes to download depending on your internet connection.&lt;/p&gt;

&lt;h1 id=&quot;intellij-idea-post-deployment-test&quot;&gt;IntelliJ IDEA Post Deployment Test&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;To test a successful build and deploy from IntelliJ IDEA to your Docker container you can try one of the following steps:
    &lt;ol&gt;
      &lt;li&gt;In your Web browser, navigate to ‘http://192.168.135.128:18080/JavaEEHelloWorld_war/’ to see your WebApp successfully running&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SSH to your Photon Instance and issue the Docker command to list running containers.  You should see ‘My-WebApp’ under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Names&lt;/code&gt; column:&lt;/p&gt;

        &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ssh -i /opt/vmware/appcatalyst/etc/appcatalyst_insecure_ssh_key photon@&amp;lt;insert guest ip here&amp;gt;
 sudo docker --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H=&amp;lt;insert guest ip here&amp;gt;:2376 ps
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h1&gt;
&lt;p&gt;So now you’ve configured a basic project within your IDE to work with VMware AppCatalyst, Photon, and Docker containers.  You can now look to implement these settings within your own project work and deploy more complex environments with the click of a button!&lt;/p&gt;

&lt;h1 id=&quot;appendix&quot;&gt;Appendix&lt;/h1&gt;

&lt;h2 id=&quot;useful-links&quot;&gt;Useful Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vmware.com/cloudnative&quot;&gt;VMware Cloud Native Apps Splash Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://communities.vmware.com/community/vmtn/devops/vmware-appcatalyst&quot;&gt;VMware AppCatalyst Splash Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://communities.vmware.com/docs/DOC-298850&quot;&gt;VMware AppCatalyst Getting Started Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vmware/photon&quot;&gt;VMware Project Photon Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/reference/builder/&quot;&gt;Docker Docs for getting started with the Dockerfile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/articles/https/&quot;&gt;Docker Docs article for securing Docker Service with HTTPS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.jetbrains.com/idea/2015/03/docker-support-in-intellij-idea-14-1/&quot;&gt;Jetbrains blog for configuring IntelliJ IDEA Docker Plug-in&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/help/developing-a-java-ee-application.html&quot;&gt;JetBrains guide for creating a Java EE Application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;known-issues&quot;&gt;Known issues:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;AppCatalyst cannot be used while VMware Fusion is running&lt;/li&gt;
  &lt;li&gt;Certificate configuration uses 192.168.135.128 address, if the target Photon instance is not the first instance powered on it will have a different IP address.  Ensure the target Photon instance is the first instance powered on to maintain a consistent IP address&lt;/li&gt;
&lt;/ul&gt;

    </content>
  </entry>
  
  <entry>
    <title>Eclipse Container Integration with VMware AppCatalyst</title>
    <link href="http://James65535.github.io/infrastructure/Eclipse-Container-Integration-with-VMware-AppCatalyst/"/>
    <updated>2016-02-03T00:00:00+08:00</updated>
    <id>http://James65535.github.io/infrastructure/Eclipse-Container-Integration-with-VMware-AppCatalyst</id>
    <author>
      <name>James65535</name>
      <uri>http://James65535.github.io/</uri>
      
    </author>
    <content type="html">
      &lt;img src=&quot;http://James65535.github.io/images/bar.jpg&quot;&gt;&lt;br/&gt;
      &lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;The past year has seen tremendous growth and support for Containerization within the Development space.  Containers provide a fast and easy way to fire up a multitude of different development, test, and even production environments.&lt;/p&gt;

&lt;p&gt;Unfortunately Docker does not run natively on OSX, an abstraction layer is needed to create a Container Runtime Host for the Docker service to run on.  Enter VMware AppCatalyst and Project Photon:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Project Photon:&lt;/strong&gt; A lightweight purpose built Linux Container Runtime Host currently released as an Open Source Tech Preview project by VMware&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;AppCatalyst:&lt;/strong&gt; A CLI/RESTful API driven lightweight hypervisor for OSX which provides a perfect environment for running Photon instances hosting Docker services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal of this article is to walk the user through the initial configuration steps required to integrate VMware AppCatalyst with IntelliJ IDEA and Eclipse IDE.  This integration will provide the user a seemles method for automating the delivery of containers and deploying their artifacts right on their laptop without having to perform any manual steps outside of the IDE.  Just tell your IDE to build your App and you’re ready to go!&lt;/p&gt;

&lt;h2 id=&quot;target-audience&quot;&gt;Target Audience&lt;/h2&gt;
&lt;p&gt;MAC OSX users who have at least a basic knowledge of Docker and reasonable knowledge of the Eclipse IDE.&lt;/p&gt;

&lt;h2 id=&quot;system-requirements&quot;&gt;System Requirements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;AppCatalyst: OSX 10.9.4 or newer&lt;/li&gt;
  &lt;li&gt;Eclipse IDE: JBoss Developer Studio 9.0, Mars, or newer&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;pre-requisites&quot;&gt;Pre-requisites&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;Install VMware AppCatalyst:
    &lt;ol&gt;
      &lt;li&gt;Follow the directions from the &lt;a href=&quot;https://communities.vmware.com/docs/DOC-29885&quot;&gt;Getting Started guide&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;You should now be able to fire up a PhotonOS VM with AppCatalyst and SSH into the Photon shell prompt&lt;/li&gt;
      &lt;li&gt;Leave your PhotonOS VM powered on&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;It is recommended to secure your Docker Daemon for listening on a secure TCP Port:
    &lt;ol&gt;
      &lt;li&gt;Follow &lt;a href=&quot;https://docs.docker.com/articles/https/&quot;&gt;the Protect the Docker Daemon Guide&lt;/a&gt; for creating the relevant certificates, you do not need to perform the “Secure by Default” section&lt;/li&gt;
      &lt;li&gt;You should now have all the certificates and keys required to setup secure access to Docker from your host machine&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;prep-work&quot;&gt;Prep-work&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;From your host machine get the IP address of your Photon instance:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; appcatalyst guest getip &amp;lt;replace with vm name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Copy the client certificates from the Photon instance to your preferred folder on your host machine, in this case/home/DockerCerts/:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; scp -i /opt/vmware/appcatalyst/etc/appcatalyst_insecure_ssh_key photon@192.168.135.128:&quot;ca.pem cert.pem ca.pem key.pem&quot; ~/DockerCerts/
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SSH to your Photon instance from your host machine:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ssh -i /opt/vmware/appcatalyst/etc/appcatalyst_insecure_ssh_key photon@192.168.135.128
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Optional: Move your server side certificates to a more appropriate folder:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo cp ~/{ca.pem,server-cert.pem,server-key.pem} /etc/ssl/certs/
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Docker service in Photon is configured through SystemD.  From your Photon SSH connection, modify your service file to change from Unix Socket to a secure TCP connection:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo nano /lib/systemd/system/docker.service
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Find the following line:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ExecStart=/bin/docker -d -s overlay
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Replace it with the following line:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ExecStart=/bin/docker -d -s overlay --tlsverify --tlscacert=/etc/ssl/certs/ca.pem --tlscert=/etc/ssl/certs/server-cert.pem --tlskey=/etc/ssl/certs/server-key.pem -H=0.0.0.0:2376
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reboot your Photon instance or reload and restart Docker using systemctl:&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo shutdown -r now
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Or&lt;/p&gt;

    &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo systemctl daemon-reload
 sudo systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;eclipse-ide-configuration&quot;&gt;Eclipse IDE Configuration&lt;/h1&gt;
&lt;p&gt;These steps will walk you through setting up your IDE for Docker integration.  It is presumed you already have a project to use, if not create a simple Java EE project with a WAR artifact labeled: JavaEEHelloWorld_war.war.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Setup the Linux Tools Docker Plugin within your Eclipse IDE
    &lt;ol&gt;
      &lt;li&gt;Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;Help&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;New Software&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Work with&lt;/code&gt; text box enter the following address:&lt;/p&gt;

        &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; http://download.eclipse.org/linuxtools/updates-docker-nightly/
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Expand &lt;code class=&quot;highlighter-rouge&quot;&gt;Linux Tools&lt;/code&gt;, select &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Client&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Tooling&lt;/code&gt;, click &lt;code class=&quot;highlighter-rouge&quot;&gt;Next&lt;/code&gt; twice and &lt;code class=&quot;highlighter-rouge&quot;&gt;Finish&lt;/code&gt;, and restart&lt;/li&gt;
      &lt;li&gt;Add the three &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Tools&lt;/code&gt; views by navigating to &lt;code class=&quot;highlighter-rouge&quot;&gt;Windows&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Show View&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Other&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker&lt;/code&gt;, and select each view&lt;/li&gt;
      &lt;li&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Explorer&lt;/code&gt; view click &lt;code class=&quot;highlighter-rouge&quot;&gt;No connection to a Docker daemon is available.  Click this link to create a new connection&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Specify the Docker API URL:  &lt;code class=&quot;highlighter-rouge&quot;&gt;https://192.168.135.128:2376&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Specifiy the Certificates Folder where you previously copied your client certificates to using SCP and hit &lt;code class=&quot;highlighter-rouge&quot;&gt;OK&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Verify you can see the new Docker server within the &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Explorer&lt;/code&gt; view.  Any images or containers should be visible within the appropriate folders&lt;/li&gt;
      &lt;li&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker Images&lt;/code&gt; view you can create a new image by clicking the &lt;code class=&quot;highlighter-rouge&quot;&gt;Build Image&lt;/code&gt; icon&lt;/li&gt;
      &lt;li&gt;Specify a name of the image, browse to a folder where you would like to place the Dockerfile, in this case create a folder called &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker-out&lt;/code&gt; within your project folder&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Click &lt;code class=&quot;highlighter-rouge&quot;&gt;Edit Dockerfile&lt;/code&gt; and specify the following:&lt;/p&gt;

        &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    FROM jboss/wildfly
    ADD JavaEEHelloWorld_war.war /opt/jboss/wildfly/standalone/deployments/
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;Place your &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaEEHelloWorld_war.war&lt;/code&gt; artifact in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Docker-out&lt;/code&gt; folder&lt;/li&gt;
      &lt;li&gt;Now select the new image and click the ‘Run Image’ icon&lt;/li&gt;
      &lt;li&gt;You should get a Wizard dialog to input the desired settings for the container but this does not currently seem to appear.  Clicking on this button produces no noticable result&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;eclipse-ide-post-deployment-test&quot;&gt;Eclipse IDE Post Deployment Test&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;To test a successful build and deploy from Eclipse IDE to your Docker container you can try one of the following steps:
    &lt;ol&gt;
      &lt;li&gt;In your Web browser, navigate to ‘http://192.168.135.128:18080/JavaEEHelloWorld_war/’ to see your WebApp successfully running&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;SSH to your Photon Instance and issue the Docker command to list running containers.  You should see ‘My-WebApp’ under the &lt;code class=&quot;highlighter-rouge&quot;&gt;Names&lt;/code&gt; column:&lt;/p&gt;

        &lt;div class=&quot;bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ssh -i /opt/vmware/appcatalyst/etc/appcatalyst_insecure_ssh_key photon@&amp;lt;insert guest ip here&amp;gt;
 sudo docker --tlsverify --tlscacert=ca.pem --tlscert=cert.pem --tlskey=key.pem -H=&amp;lt;insert guest ip here&amp;gt;:2376 ps
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h1&gt;
&lt;p&gt;So now you’ve configured a basic project within your IDE to work with VMware AppCatalyst, Photon, and Docker containers.  You can now look to implement these settings within your own project work and deploy more complex environments with the click of a button!&lt;/p&gt;

&lt;h1 id=&quot;appendix&quot;&gt;Appendix&lt;/h1&gt;

&lt;h2 id=&quot;useful-links&quot;&gt;Useful Links&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.vmware.com/cloudnative&quot;&gt;VMware Cloud Native Apps Splash Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://communities.vmware.com/community/vmtn/devops/vmware-appcatalyst&quot;&gt;VMware AppCatalyst Splash Page&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://communities.vmware.com/docs/DOC-298850&quot;&gt;VMware AppCatalyst Getting Started Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vmware/photon&quot;&gt;VMware Project Photon Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/reference/builder/&quot;&gt;Docker Docs for getting started with the Dockerfile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.docker.com/articles/https/&quot;&gt;Docker Docs article for securing Docker Service with HTTPS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/community/eclipse_newsletter/2015/june/article3.php&quot;&gt;Eclipse Docker Tooling Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;known-issues&quot;&gt;Known issues:&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;AppCatalyst cannot be used while VMware Fusion is running&lt;/li&gt;
  &lt;li&gt;Certificate configuration uses 192.168.135.128 address, if the target Photon instance is not the first instance powered on it will have a different IP address.  Ensure the target Photon instance is the first instance powered on to maintain a consistent IP address&lt;/li&gt;
&lt;/ul&gt;

    </content>
  </entry>
  
  
</feed>